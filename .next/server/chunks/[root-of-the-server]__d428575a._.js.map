{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/lib/db.ts"],"sourcesContent":["    import mongoose from 'mongoose';\r\n\r\n    const MONGODB_URI = process.env.MONGODB_URI;\r\n\r\n    if (!MONGODB_URI) {\r\n    throw new Error('Please define the MONGODB_URI environment variable inside .env.local');\r\n    }\r\n\r\n    // Global cache to prevent multiple connections in development\r\n    declare global {\r\n    var mongoose: any;\r\n    }\r\n\r\n    let cached = global.mongoose;\r\n\r\n    if (!cached) {\r\n    cached = global.mongoose = { conn: null, promise: null };\r\n    }\r\n\r\n    async function connectDB() {\r\n    try {\r\n        if (cached.conn) {\r\n        console.log('üì¶ Using cached database connection');\r\n        return cached.conn;\r\n        }\r\n\r\n        if (!cached.promise) {\r\n        const opts = {\r\n            bufferCommands: false,\r\n        };\r\n\r\n        console.log('üîó Creating new database connection...');\r\n        cached.promise = mongoose.connect(MONGODB_URI!, opts).then((mongoose) => {\r\n            console.log('‚úÖ MongoDB connected successfully');\r\n            return mongoose;\r\n        });\r\n        }\r\n\r\n        cached.conn = await cached.promise;\r\n        return cached.conn;\r\n    } catch (error) {\r\n        console.error('‚ùå MongoDB connection error:', error);\r\n        throw new Error('Failed to connect to MongoDB');\r\n    }\r\n    }\r\n\r\n    export default connectDB;"],"names":[],"mappings":";;;AAAI;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW;AAE3C,IAAI,CAAC,aAAa;IAClB,MAAM,IAAI,MAAM;AAChB;AAOA,IAAI,SAAS,OAAO,QAAQ;AAE5B,IAAI,CAAC,QAAQ;IACb,SAAS,OAAO,QAAQ,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AACvD;AAEA,eAAe;IACf,IAAI;QACA,IAAI,OAAO,IAAI,EAAE;YACjB,QAAQ,GAAG,CAAC;YACZ,OAAO,OAAO,IAAI;QAClB;QAEA,IAAI,CAAC,OAAO,OAAO,EAAE;YACrB,MAAM,OAAO;gBACT,gBAAgB;YACpB;YAEA,QAAQ,GAAG,CAAC;YACZ,OAAO,OAAO,GAAG,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAc,MAAM,IAAI,CAAC,CAAC;gBACxD,QAAQ,GAAG,CAAC;gBACZ,OAAO;YACX;QACA;QAEA,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;QAClC,OAAO,OAAO,IAAI;IACtB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IACpB;AACA;uCAEe","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/models/User.ts"],"sourcesContent":["    import mongoose, { Document, Schema } from 'mongoose';\r\n\r\n    export interface IUser extends Document {\r\n    username: string;\r\n    email: string;\r\n    password: string;\r\n    createdAt: Date;\r\n    updatedAt: Date;\r\n    }\r\n\r\n    const UserSchema: Schema = new Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, 'Username is required'],\r\n        trim: true,\r\n        minlength: [2, 'Username must be at least 2 characters long'],\r\n        maxlength: [50, 'Username must be less than 50 characters']\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: [true, 'Email is required'],\r\n        unique: true,\r\n        lowercase: true,\r\n        trim: true,\r\n        match: [/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/, 'Please enter a valid email']\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: [true, 'Password is required'],\r\n        minlength: [6, 'Password must be at least 6 characters long']\r\n    }\r\n    }, {\r\n    timestamps: true // This automatically adds createdAt and updatedAt fields\r\n    });\r\n\r\n    // Prevent re-compilation during development\r\n    export default mongoose.models.User || mongoose.model<IUser>('User', UserSchema);"],"names":[],"mappings":";;;AAAI;;AAUA,MAAM,aAAqB,IAAI,yGAAA,CAAA,SAAM,CAAC;IACtC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;QACN,WAAW;YAAC;YAAG;SAA8C;QAC7D,WAAW;YAAC;YAAI;SAA2C;IAC/D;IACA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,WAAW;QACX,MAAM;QACN,OAAO;YAAC;YAA+C;SAA6B;IACxF;IACA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,WAAW;YAAC;YAAG;SAA8C;IACjE;AACA,GAAG;IACH,YAAY,KAAK,yDAAyD;AAC1E;uCAGe,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAQ,QAAQ","debugId":null}},
    {"offset": {"line": 203, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcryptjs';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport async function hashPassword(password: string): Promise<string> {\r\n    try {\r\n        const saltRounds = 10;\r\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n        return hashedPassword;\r\n    } catch (error) {\r\n        console.error('Error hashing password:', error);\r\n        throw new Error('Failed to hash password');\r\n    }\r\n}\r\n\r\nexport async function comparePassword(password: string, hashedPassword: string): Promise<boolean> {\r\n    try {\r\n        const isMatch = await bcrypt.compare(password, hashedPassword);\r\n        return isMatch;\r\n    } catch (error) {\r\n        console.error('Error comparing password:', error);\r\n        throw new Error('Failed to compare password');\r\n    }\r\n}\r\n\r\nexport function generateToken(payload: object): string {\r\n    try {\r\n        const secret = process.env.JWT_SECRET;\r\n        \r\n        if (!secret) {\r\n            throw new Error('JWT_SECRET is not defined in environment variables');\r\n        }\r\n        \r\n        const token = jwt.sign(payload, secret, { \r\n            expiresIn: '7d',\r\n            issuer: 'your-app-name' \r\n        });\r\n        \r\n        return token;\r\n    } catch (error) {\r\n        console.error('Error generating JWT token:', error);\r\n        throw new Error('Failed to generate token');\r\n    }\r\n}\r\n\r\nexport function verifyToken(token: string) {\r\n    try {\r\n        const secret = process.env.JWT_SECRET;\r\n        \r\n        if (!secret) {\r\n            throw new Error('JWT_SECRET is not defined in environment variables');\r\n        }\r\n        \r\n        const decoded = jwt.verify(token, secret);\r\n        return decoded;\r\n    } catch (error) {\r\n        console.error('Error verifying JWT token:', error);\r\n        throw new Error('Invalid or expired token');\r\n    }\r\n}\r\n\r\n// ===== CLIENT-SIDE FUNCTIONS (Add these) =====\r\n\r\n// Simple client-side JWT decoder (without verification for display purposes)\r\nexport function decodeToken(token: string) {\r\n    try {\r\n        const base64Url = token.split('.')[1];\r\n        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\r\n            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\r\n        }).join(''));\r\n        \r\n        return JSON.parse(jsonPayload);\r\n    } catch (error) {\r\n        console.error('Error decoding token:', error);\r\n        return null;\r\n    }\r\n}\r\n\r\n// Check if token is expired\r\nexport function isTokenExpired(token: string): boolean {\r\n    try {\r\n        const decoded = decodeToken(token);\r\n        if (!decoded || !decoded.exp) return true;\r\n        \r\n        const currentTime = Date.now() / 1000;\r\n        return decoded.exp < currentTime;\r\n    } catch (error) {\r\n        return true;\r\n    }\r\n}\r\n\r\n// Get user data from token\r\nexport function getUserFromToken(token: string) {\r\n    try {\r\n        const decoded = decodeToken(token);\r\n        if (!decoded) return null;\r\n        \r\n        // Extract user data from token payload\r\n        return {\r\n            id: decoded.userId || decoded.id,\r\n            email: decoded.email,\r\n            name: decoded.name,\r\n            // Add other fields based on your token structure\r\n        };\r\n    } catch (error) {\r\n        return null;\r\n    }\r\n}\r\n\r\n// Auth service for localStorage management\r\nexport class AuthService {\r\n    static TOKEN_KEY = 'auth-token';\r\n\r\n    static getToken(): string | null {\r\n        if (typeof window === 'undefined') return null;\r\n        return localStorage.getItem(this.TOKEN_KEY);\r\n    }\r\n\r\n    static setToken(token: string): void {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.setItem(this.TOKEN_KEY, token);\r\n    }\r\n\r\n    static removeToken(): void {\r\n        if (typeof window === 'undefined') return;\r\n        localStorage.removeItem(this.TOKEN_KEY);\r\n    }\r\n\r\n    static getCurrentUser() {\r\n        const token = this.getToken();\r\n        if (!token || isTokenExpired(token)) {\r\n            this.removeToken();\r\n            return null;\r\n        }\r\n        return getUserFromToken(token);\r\n    }\r\n\r\n    static isAuthenticated(): boolean {\r\n        const token = this.getToken();\r\n        return !!(token && !isTokenExpired(token));\r\n    }\r\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/app/api/auth/login/route.ts"],"sourcesContent":["    import { NextResponse } from 'next/server';\r\n    import connectDB from '@/lib/db';\r\n    import User from '@/models/User';\r\n    import { comparePassword, generateToken } from '@/lib/auth';\r\n\r\n    export async function POST(req: Request) {\r\n    try {\r\n        const { email, password } = await req.json();\r\n        await connectDB();\r\n\r\n        const user = await User.findOne({ email });\r\n        if (!user) {\r\n        return NextResponse.json({ message: 'Invalid email or password' }, { status: 401 });\r\n        }\r\n\r\n        const isMatch = await comparePassword(password, user.password);\r\n        if (!isMatch) {\r\n        return NextResponse.json({ message: 'Invalid email or password' }, { status: 401 });\r\n        }\r\n\r\n        const token = generateToken({ userId: user._id });\r\n        return NextResponse.json({ user: { id: user._id, email: user.email }, token }, { status: 200 });\r\n    } catch (err) {\r\n        console.error('Login error:', err);\r\n        return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n    }\r\n    }\r\n"],"names":[],"mappings":";;;AAAI;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,GAAY;IACvC,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAI,IAAI;QAC1C,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAS,AAAD;QAEd,MAAM,OAAO,MAAM,gHAAA,CAAA,UAAI,CAAC,OAAO,CAAC;YAAE;QAAM;QACxC,IAAI,CAAC,MAAM;YACX,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,kBAAe,AAAD,EAAE,UAAU,KAAK,QAAQ;QAC7D,IAAI,CAAC,SAAS;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA4B,GAAG;gBAAE,QAAQ;YAAI;QACjF;QAEA,MAAM,QAAQ,CAAA,GAAA,6GAAA,CAAA,gBAAa,AAAD,EAAE;YAAE,QAAQ,KAAK,GAAG;QAAC;QAC/C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;gBAAE,IAAI,KAAK,GAAG;gBAAE,OAAO,KAAK,KAAK;YAAC;YAAG;QAAM,GAAG;YAAE,QAAQ;QAAI;IACjG,EAAE,OAAO,KAAK;QACV,QAAQ,KAAK,CAAC,gBAAgB;QAC9B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IACjF;AACA","debugId":null}}]
}