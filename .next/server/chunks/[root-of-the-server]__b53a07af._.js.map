{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/lib/auth.ts"],"sourcesContent":["    import bcrypt from 'bcryptjs';\r\n    import jwt from 'jsonwebtoken';\r\n\r\n    export async function hashPassword(password: string): Promise<string> {\r\n    try {\r\n        const saltRounds = 10;\r\n        const hashedPassword = await bcrypt.hash(password, saltRounds);\r\n        return hashedPassword;\r\n    } catch (error) {\r\n        console.error('Error hashing password:', error);\r\n        throw new Error('Failed to hash password');\r\n    }\r\n    }\r\n\r\n    export async function comparePassword(password: string, hashedPassword: string): Promise<boolean> {\r\n    try {\r\n        const isMatch = await bcrypt.compare(password, hashedPassword);\r\n        return isMatch;\r\n    } catch (error) {\r\n        console.error('Error comparing password:', error);\r\n        throw new Error('Failed to compare password');\r\n    }\r\n    }\r\n\r\n    export function generateToken(payload: object): string {\r\n    try {\r\n        const secret = process.env.JWT_SECRET;\r\n        \r\n        if (!secret) {\r\n        throw new Error('JWT_SECRET is not defined in environment variables');\r\n        }\r\n        \r\n        const token = jwt.sign(payload, secret, { \r\n        expiresIn: '7d',\r\n        issuer: 'your-app-name' \r\n        });\r\n        \r\n        return token;\r\n    } catch (error) {\r\n        console.error('Error generating JWT token:', error);\r\n        throw new Error('Failed to generate token');\r\n    }\r\n    }\r\n\r\n    export function verifyToken(token: string) {\r\n    try {\r\n        const secret = process.env.JWT_SECRET;\r\n        \r\n        if (!secret) {\r\n        throw new Error('JWT_SECRET is not defined in environment variables');\r\n        }\r\n        \r\n        const decoded = jwt.verify(token, secret);\r\n        return decoded;\r\n    } catch (error) {\r\n        console.error('Error verifying JWT token:', error);\r\n        throw new Error('Invalid or expired token');\r\n    }\r\n    }"],"names":[],"mappings":";;;;;;AAAI;AACA;;;AAEO,eAAe,aAAa,QAAgB;IACnD,IAAI;QACA,MAAM,aAAa;QACnB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QACnD,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,MAAM,IAAI,MAAM;IACpB;AACA;AAEO,eAAe,gBAAgB,QAAgB,EAAE,cAAsB;IAC9E,IAAI;QACA,MAAM,UAAU,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;QAC/C,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,MAAM,IAAI,MAAM;IACpB;AACA;AAEO,SAAS,cAAc,OAAe;IAC7C,IAAI;QACA,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU;QAErC,IAAI,CAAC,QAAQ;YACb,MAAM,IAAI,MAAM;QAChB;QAEA,MAAM,QAAQ,uIAAA,CAAA,UAAG,CAAC,IAAI,CAAC,SAAS,QAAQ;YACxC,WAAW;YACX,QAAQ;QACR;QAEA,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,MAAM,IAAI,MAAM;IACpB;AACA;AAEO,SAAS,YAAY,KAAa;IACzC,IAAI;QACA,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU;QAErC,IAAI,CAAC,QAAQ;YACb,MAAM,IAAI,MAAM;QAChB;QAEA,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,OAAO;QAClC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,IAAI,MAAM;IACpB;AACA","debugId":null}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Egzon/Desktop/Gaming-NextJS/app/api/auth/verify/route.js"],"sourcesContent":["    import { verifyToken } from '../../../../lib/auth';\r\n    import { NextResponse } from 'next/server';\r\n\r\n    export async function POST(request) {\r\n    try {\r\n        const authHeader = request.headers.get('authorization');\r\n        \r\n        if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n        return NextResponse.json({ message: 'No token provided' }, { status: 401 });\r\n        }\r\n\r\n        const token = authHeader.substring(7);\r\n        const decoded = verifyToken(token);\r\n        \r\n        if (!decoded) {\r\n        return NextResponse.json({ message: 'Invalid token' }, { status: 401 });\r\n        }\r\n\r\n        return NextResponse.json({\r\n        message: 'Token is valid',\r\n        user: {\r\n            userId: decoded.userId,\r\n            email: decoded.email,\r\n            username: decoded.username\r\n        }\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error('Token verification error:', error);\r\n        return NextResponse.json({ message: 'Internal server error' }, { status: 500 });\r\n    }\r\n    }"],"names":[],"mappings":";;;AAAI;AACA;;;AAEO,eAAe,KAAK,OAAO;IAClC,IAAI;QACA,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QAEvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACtD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAoB,GAAG;gBAAE,QAAQ;YAAI;QACzE;QAEA,MAAM,QAAQ,WAAW,SAAS,CAAC;QACnC,MAAM,UAAU,CAAA,GAAA,6GAAA,CAAA,cAAW,AAAD,EAAE;QAE5B,IAAI,CAAC,SAAS;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAgB,GAAG;gBAAE,QAAQ;YAAI;QACrE;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACzB,SAAS;YACT,MAAM;gBACF,QAAQ,QAAQ,MAAM;gBACtB,OAAO,QAAQ,KAAK;gBACpB,UAAU,QAAQ,QAAQ;YAC9B;QACA;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAwB,GAAG;YAAE,QAAQ;QAAI;IACjF;AACA","debugId":null}}]
}